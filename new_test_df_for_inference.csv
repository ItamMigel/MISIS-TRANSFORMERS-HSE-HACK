,id,task_id,description,input,output,student_solution,author_solution,author_comment,type,prompt
0,0,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print('Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print('Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
1,1,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.)","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.) 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
2,2,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(fРеализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(fРеализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
3,3,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {discount} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {discount} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
4,4,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money * discount} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money * discount} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
5,5,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f""Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f""Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
6,6,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print('Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print('Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
7,7,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

    print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

    print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
8,8,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.' 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
9,9,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить money тыс. руб. без скидки. Со скидой стоимость составит money- (money * discount) тыс. руб.')","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить money тыс. руб. без скидки. Со скидой стоимость составит money- (money * discount) тыс. руб.') 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
10,10,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = int(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = int(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.' 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
11,11,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * int(discount))} тыс. руб.'","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * int(discount))} тыс. руб.' 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
12,12,0,"Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку!","['0.1; 500', '0.05; 900000', '0; 2345678', '0.5; 100', '0.003; 12345667']","['Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.', 'Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб.', 'Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб.', 'Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб.', 'Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб.']","discount  = float(input())
money = int(input())

#ваш код ниже

Print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'","discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: 

В переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 0.1; 500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 0.05; 900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. без скидки. Со скидкой стоимость составит 855000.0 тыс. руб. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 0; 2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. без скидки. Со скидкой стоимость составит 2345678.0 тыс. руб. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 0.5; 100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. без скидки. Со скидкой стоимость составит 50.0 тыс. руб. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 0.003; 12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. без скидки. Со скидкой стоимость составит 12308629.999 тыс. руб. 
<Решение студента>: discount  = float(input())
money = int(input())

#ваш код ниже

Print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.' 
<Идеальное решение>: discount  = float(input())
money = int(input())

#ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.') 


<Комментарий эксперта>: "
13,60,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = input().split(', ')
favorite_colors =input().split(', ')
used_colors = input().split(', ')

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = input().split(', ')
favorite_colors =input().split(', ')
used_colors = input().split(', ')

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
14,61,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

ans = allowed_colors & used_colors & favorite_colors

print(ans, sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

ans = allowed_colors & used_colors & favorite_colors

print(ans, sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
15,62,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

ans = allowed_colors & used_colors & favorite_colors

print(*ans, sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

ans = allowed_colors & used_colors & favorite_colors

print(*ans, sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
16,63,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
17,64,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = ';', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = ';', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
18,65,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors - used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors - used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
19,66,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors - used_colors - favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors - used_colors - favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
20,67,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors - favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors - favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
21,68,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors), reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors), reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
22,69,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
23,70,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowedcolors & usedcolors & favoritecolors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowedcolors & usedcolors & favoritecolors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
24,71,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors and used_colors and favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors and used_colors and favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
25,72,4,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный\nИндиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий']","['Желтый; Пурпурный; Серый!', '!', 'Синий!', 'Индиго; Красный!', '!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors + used_colors + favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Умеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Желтый; Пурпурный; Серый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: Синий! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Индиго, Красный, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный
Индиго, Томатно-красный, Желтый, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors + used_colors + favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
26,73,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios:
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios:
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
27,74,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value:
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value:
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
28,75,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in k:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in k:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
29,76,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in key.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in key.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
30,77,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
31,78,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.add(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.add(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
32,79,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(set(residences))","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(set(residences)) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
33,80,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*set(residences), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*set(residences), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
34,81,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)))","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences))) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
35,82,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(residences), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(residences), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
36,83,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(room)","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(room) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
37,84,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(room)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(room)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
38,85,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
39,86,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
    print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
    print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
40,87,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
        residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
        residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
41,88,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in v
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
42,89,5,"Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'прихожая', 'гардеробная', 'прихожая']","['Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк', 'Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал', nan, 'Британика/Гринфилд/Монтевиль/Риверсайд', 'Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал', 'Британика/Гринфилд/Монтевиль/Риверсайд']","room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in value:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (""/""). Названия поселков должны идти в алфавитном порядке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Британика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Британика/Гринфилд/Монтевиль/Сканди-парк/Театральный квартал 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Театральный квартал 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: nan 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Британика/Гринфилд/Монтевиль/Риверсайд 
<Решение студента>: room = input()

residences = ()
for key, value in studios.items():
    for k, v in value.items():
        if room not in value:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(set(residences)), sep='/') 


<Комментарий эксперта>: "
43,197,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print('Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print('Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
44,198,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.)","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.) 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
45,199,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print(fРеализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print(fРеализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
46,200,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print('Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print('Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
47,201,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

    print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

    print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
48,202,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить money тыс. руб. Срок реализации проекта duration недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить money тыс. руб. Срок реализации проекта duration недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
49,203,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = input()

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = input()

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
50,204,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = input()
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = input()
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
51,205,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
52,206,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

Print(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

Print(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
53,207,12,"Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку!","['10\n500', '7\n900000', '110\n2345678', '8\n100', '9\n12345667']","['Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.', 'Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель.', 'Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель.', 'Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель.', 'Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель.']","duration  = int(input())
money = int(input())

# ваш код ниже

Print(f'Реализация проекта будет стоить {time} тыс. руб. Срок реализации проекта {money} недель.')","duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает стоимость и срок реализации проекта: 

В переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.
В переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.
Программа должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 10
500 
<Вывод>: Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель. 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 7
900000 
<Вывод>: Реализация проекта будет стоить 900000 тыс. руб. Срок реализации проекта 7 недель. 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: 110
2345678 
<Вывод>: Реализация проекта будет стоить 2345678 тыс. руб. Срок реализации проекта 110 недель. 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 8
100 
<Вывод>: Реализация проекта будет стоить 100 тыс. руб. Срок реализации проекта 8 недель. 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9
12345667 
<Вывод>: Реализация проекта будет стоить 12345667 тыс. руб. Срок реализации проекта 9 недель. 
<Решение студента>: duration  = int(input())
money = int(input())

# ваш код ниже

Print(f'Реализация проекта будет стоить {time} тыс. руб. Срок реализации проекта {money} недель.') 
<Идеальное решение>: duration  = int(input())
money = int(input())

# ваш код ниже

print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.') 


<Комментарий эксперта>: "
54,208,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = int(input())

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = int(input())

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
55,209,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color in logo_project and color in cite_project:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color in logo_project and color in cite_project:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
56,210,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color not in cite_project:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color not in cite_project:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
57,211,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project: 
    print(True)
elif color in cite_project:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project: 
    print(True)
elif color in cite_project:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
58,212,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(False)
else:
    print(True)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(False)
else:
    print(True) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
59,213,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
60,214,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logoproject and color in citeproject:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logoproject and color in citeproject:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
61,215,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
62,216,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
63,217,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else color in logo_project and color not in cite_project:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else color in logo_project and color not in cite_project:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
64,218,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(true)
else:
    print(false)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(true)
else:
    print(false) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
65,219,13,"Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False. ","['#ccb1e6', '#e4e3b3', '#e4b3cd', '#b4f99e', '#a7f0ca']","['True', 'False', 'False', 'True', 'False']","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project:
    print(True)
else:
    print(False)","logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:

Даны два списка logo_project и cite_project с кодами используемых цветов (строки).
В переменную color считывается код цвета (строка). Этот код уже написан.
Программа должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. 
В остальных случаях программа печатает False.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: #ccb1e6 
<Вывод>: True 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: #e4e3b3 
<Вывод>: False 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: #e4b3cd 
<Вывод>: False 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: #b4f99e 
<Вывод>: True 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: #a7f0ca 
<Вывод>: False 
<Решение студента>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project:
    print(True)
else:
    print(False) 
<Идеальное решение>: logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']
cite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']

color = input()

if color not in logo_project and color in cite_project:
    print(True)
else:
    print(False) 


<Комментарий эксперта>: "
66,235,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo:
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo:
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
67,236,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') or info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') or info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
68,237,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith(@) and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith(@) and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
69,238,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info.isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info.isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
70,239,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and not(info[1:].isnumeric() == True):      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and not(info[1:].isnumeric() == True):      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
71,240,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() = True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() = True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
72,241,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.add(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.add(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
73,242,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*info, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*info, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
74,243,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
    print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
    print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
75,244,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(logo)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(logo)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
76,245,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(res)","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(res) 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
77,246,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res)","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res) 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
78,247,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=',')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=',') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
79,248,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*sorted(res), sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*sorted(res), sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
80,249,15,"Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает.","['@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple', 'Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 %', '@POWERFULL @&&&&& @14568 @Вашего @бизнеса_123', 'Я никогда не был @счастье1 @love @### love@love', '9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk', '@ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk']","['@thebestteacher', '@1questions1, @100', '@POWERFULL, @14568, @Вашего', '@счастье1, @love', nan, '@123, @qws1, @0']","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isnumeric() == True or info[1:].isalpha() == True:      
        res.append(info)
        
print(*res, sep=', ')","logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ')",,"['open', 'open', 'open', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: 

В переменную logo считывается текст лендинга. Этот код уже написан.
Программа проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака ""@"" и которые содержат в себе только цифры или буквы (не включая знак ""@""). Гарантируется, что упоминания отделены от другого текста пробелом. 
В конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.
Если упоминаний в тексте нет, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: @thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple 
<Вывод>: @thebestteacher 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Ваш вопрос из раздел @1questions1 - наш ответ @answer_top! Мы всегда с Вами yf @100 % 
<Вывод>: @1questions1, @100 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: @POWERFULL @&&&&& @14568 @Вашего @бизнеса_123 
<Вывод>: @POWERFULL, @14568, @Вашего 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Я никогда не был @счастье1 @love @### love@love 
<Вывод>: @счастье1, @love 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 9 из 10 экспертов рекомендуют @ наш @_1223 продукт @__ . abcdedasdfasj@hdadsgfasdbvfvabdkfvnk 
<Вывод>: nan 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: @ @123 @qswr_1 @qws1 $1@qwd 1@123_qwe 1@123qwe @0 #____  567@23 abcdedj@hdbvfvabdkfvnk 
<Вывод>: @123, @qws1, @0 
<Решение студента>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isnumeric() == True or info[1:].isalpha() == True:      
        res.append(info)
        
print(*res, sep=', ') 
<Идеальное решение>: logo = input()

res = []
for info in logo.split():
    if info.startswith('@') and info[1:].isalnum() == True:      
        res.append(info)
        
print(*res, sep=', ') 


<Комментарий эксперта>: "
81,250,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = input().split(', ')
favorite_colors = input().split(', ')
used_colors = input().split(', ')

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = input().split(', ')
favorite_colors = input().split(', ')
used_colors = input().split(', ')

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
82,251,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(used_colors & favorite_colors - allowed_colors)","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(used_colors & favorite_colors - allowed_colors) 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
83,252,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*(used_colors & favorite_colors - allowed_colors))","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*(used_colors & favorite_colors - allowed_colors)) 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
84,253,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors))","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors)) 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
85,254,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
86,255,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
87,256,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors - favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors - favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
88,257,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors and favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors and favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
89,258,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
90,259,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors + favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors + favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
91,260,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(usedcolors & favoritecolors - allowedcolors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(usedcolors & favoritecolors - allowedcolors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
92,261,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
93,262,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
94,263,16,"Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак. ","['Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый', 'Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара\n\nСиний, Гранитный', 'Синий\nСиний\nСиний', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\nИндиго, Фалунский красный, Красный, Алый\nИндиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый', 'Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый\n\nЖелтый, Серый, Спаржа, Синий', 'Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый']","['Оливковый; Пастельно-зеленый; Патиново-зеленый!', '!', '!', 'Индиго; Красный!', '!', 'Серый; Спаржа!']","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = ' !')","allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",,"['open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:

В переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.
В переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.
В переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.
Гарантируется, что цвета в каждом списке уникальны.
Любой список может оказаться пустым.
Программа выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.
Цвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.
Если таких цветов нет, программа выводит только восклицательный знак.  
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Алый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый
Пастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый
Огненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый 
<Вывод>: Оливковый; Пастельно-зеленый; Патиново-зеленый! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Алый, Белый, Бордо, Нефритовый, Пастельно-зеленый, Гранитный, Серый хаки, Ниагара

Синий, Гранитный 
<Вывод>: ! 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Синий
Синий
Синий 
<Вывод>: ! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый
Индиго, Фалунский красный, Красный, Алый
Индиго, Томатно-красный, Красный, Умеренно зеленый, Телегрей, Алый 
<Вывод>: Индиго; Красный! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Слоновая кость, Серый, Желтый, Спаржа, Телегрей, Темно-розовый, Пурпурный, Алый

Желтый, Серый, Спаржа, Синий 
<Вывод>: ! 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Умеренный синий, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый
Желтый, Пурпурный, Черный, Серый, Спаржа, Фисташковый
Серый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый 
<Вывод>: Серый; Спаржа! 
<Решение студента>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = ' !') 
<Идеальное решение>: allowed_colors = set(input().split(', '))
favorite_colors = set(input().split(', '))
used_colors = set(input().split(', '))

print(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!') 


<Комментарий эксперта>: "
95,264,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios:
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios:
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
96,265,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value:
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value:
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
97,266,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in key.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in key.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
98,267,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(key)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(key)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
99,268,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
100,269,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room in v:
            residences.append(value)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room in v:
            residences.append(value)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
101,270,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(residences)","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(residences) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
102,271,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*residences)","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*residences) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
103,272,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences))","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences)) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
104,273,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
105,274,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True))","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True)) 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
106,275,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    if room  in value[1]:
        residences.append(value[0])
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    if room  in value[1]:
        residences.append(value[0])
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
107,276,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room not in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
108,277,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.add(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.add(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
109,278,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residence.append(k)
    
print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residence.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
110,279,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences), reverse = True,  sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences), reverse = True,  sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
111,280,17,"Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.","['кабинет', 'гараж', 'гостинная', 'гостевой санузел', 'санузел', 'мастер-спальня', 'столовая', 'холл', 'гардеробная', 'прихожая']","['Гринфилд/Гринфилд', nan, 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', 'Театральный квартал', 'Риверсайд/Британика', 'Сканди-парк', 'Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика', nan, 'Гринфилд', 'Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика']","room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
    print(*sorted(residences, reverse = True), sep='/')","studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/')",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:

Дан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.
В переменную room считывается название помещения (строка). Этот код уже написан.
Определите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (""/""). Названия поселков должны идти в обратном алфавитном порядке.
Если ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: кабинет 
<Вывод>: Гринфилд/Гринфилд 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: гараж 
<Вывод>: nan 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: гостинная 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: гостевой санузел 
<Вывод>: Театральный квартал 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: санузел 
<Вывод>: Риверсайд/Британика 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: мастер-спальня 
<Вывод>: Сканди-парк 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: столовая 
<Вывод>: Театральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: холл 
<Вывод>: nan 
<Example 9>: 
<Тип теста 9>: closed 
<Ввод>: гардеробная 
<Вывод>: Гринфилд 
<Example 10>: 
<Тип теста 10>: closed 
<Ввод>: прихожая 
<Вывод>: Театральный квартал/Сканди-парк/Гринфилд/Британика/Британика 
<Решение студента>: room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
    print(*sorted(residences, reverse = True), sep='/') 
<Идеальное решение>: studios = {
    
    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], 
                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},
    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], 
            'Британика': [""прихожая"", 'гостинная', 'столовая'], 
            'Театральный квартал': [""прихожая"", ""гостевой санузел"", 'столовая', 'гостинная']},
    'Greenvillage': {'Британика': [""столовая"", ""гостинная""], 
                     'Риверсайд': [""гостинная"", ""столовая"", ""санузел""]},
    'T+T architects': {'Гринфилд': [""гостинная"", ""прихожая"", ""столовая"", 'кабинет'], 
                       'Монтевиль':[""гостинная"", 'столовая']}
}

room = input()

residences = []
for key, value in studios.items():
    for k, v in value.items():
        if room  in v:
            residences.append(k)
    
print(*sorted(residences, reverse = True), sep='/') 


<Комментарий эксперта>: "
112,298,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.txt', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.txt', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
113,299,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
114,300,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
115,301,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
116,302,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
117,303,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(', ')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(', ')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
118,304,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
119,305,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[1]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[1]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
120,306,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if info[-1].split()[0] <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if info[-1].split()[0] <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
121,307,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) < week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) < week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
122,308,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week or int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week or int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
123,309,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) < 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) < 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
124,310,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) == week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) == week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
125,311,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
126,312,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and info[-2].split()[0] <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and info[-2].split()[0] <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
127,313,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
128,314,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(info)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(info) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
129,315,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week:
            print(info)
        if int(info[-2].split()[0]) <= 250:
            print(info)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week:
            print(info)
        if int(info[-2].split()[0]) <= 250:
            print(info) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
130,316,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week:
            print(info)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week:
            print(info) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
131,317,19,"Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['20', '40', '8', '15', '43']","['2019,178 тыс. руб.,9 недель\n2022,180 тыс. руб.,19 недель\n2020,159 тыс. руб.,7 недель\n2021,127 тыс. руб.,13 недель\n2023,174 тыс. руб.,9 недель\n2021,124 тыс. руб.,9 недель\n2022,155 тыс. руб.,9 недель', '2021,222 тыс. руб.,21 недель\n2020,107 тыс. руб.,20 недель\n2021,115 тыс. руб.,40 недель\n2023,150 тыс. руб.,35 недель\n2019,129 тыс. руб.,19 недель\n2021,112 тыс. руб.,37 недель\n2019,147 тыс. руб.,18 недель\n2019,107 тыс. руб.,23 недель\n2022,181 тыс. руб.,20 недель\n2020,112 тыс. руб.,40 недель\n2022,158 тыс. руб.,25 недель\n2020,184 тыс. руб.,15 недель\n2020,184 тыс. руб.,36 недель\n2018,167 тыс. руб.,29 недель\n2020,201 тыс. руб.,29 недель', nan, '2016,219 тыс. руб.,11 недель\n2023,220 тыс. руб.,12 недель\n2017,164 тыс. руб.,15 недель\n2015,180 тыс. руб.,15 недель\n2019,115 тыс. руб.,15 недель', '2016,219 тыс. руб.,11 недель\n2020,197 тыс. руб.,19 недель\n2022,195 тыс. руб.,43 недель\n2023,220 тыс. руб.,12 недель\n2019,113 тыс. руб.,41 недель\n2016,195 тыс. руб.,37 недель\n2022,175 тыс. руб.,17 недель\n2017,215 тыс. руб.,22 недель\n2017,164 тыс. руб.,15 недель\n2020,104 тыс. руб.,42 недель\n2020,190 тыс. руб.,36 недель\n2022,135 тыс. руб.,41 недель\n2020,153 тыс. руб.,34 недель\n2015,180 тыс. руб.,15 недель\n2016,153 тыс. руб.,19 недель\n2020,177 тыс. руб.,43 недель\n2018,215 тыс. руб.,40 недель\n2019,115 тыс. руб.,15 недель\n2019,125 тыс. руб.,24 недель\n2018,145 тыс. руб.,41 недель']","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-2].split()[0]) <= 250:
            print(info)","week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line)",,"['open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..

Программа должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка ""2019,200 тыс. руб.,10 недель"" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.
Гарантируется, что стоимость реализованного проекта всегда записана в формате ""<целое число> тыс. руб."".
Гарантируется, что срок реализации проекта всегда записан в формате ""<целое число> недель"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится строка — количество недель.
Программа должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 20 
<Вывод>: 2019,178 тыс. руб.,9 недель
2022,180 тыс. руб.,19 недель
2020,159 тыс. руб.,7 недель
2021,127 тыс. руб.,13 недель
2023,174 тыс. руб.,9 недель
2021,124 тыс. руб.,9 недель
2022,155 тыс. руб.,9 недель 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 40 
<Вывод>: 2021,222 тыс. руб.,21 недель
2020,107 тыс. руб.,20 недель
2021,115 тыс. руб.,40 недель
2023,150 тыс. руб.,35 недель
2019,129 тыс. руб.,19 недель
2021,112 тыс. руб.,37 недель
2019,147 тыс. руб.,18 недель
2019,107 тыс. руб.,23 недель
2022,181 тыс. руб.,20 недель
2020,112 тыс. руб.,40 недель
2022,158 тыс. руб.,25 недель
2020,184 тыс. руб.,15 недель
2020,184 тыс. руб.,36 недель
2018,167 тыс. руб.,29 недель
2020,201 тыс. руб.,29 недель 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 8 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 15 
<Вывод>: 2016,219 тыс. руб.,11 недель
2023,220 тыс. руб.,12 недель
2017,164 тыс. руб.,15 недель
2015,180 тыс. руб.,15 недель
2019,115 тыс. руб.,15 недель 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: 43 
<Вывод>: 2016,219 тыс. руб.,11 недель
2020,197 тыс. руб.,19 недель
2022,195 тыс. руб.,43 недель
2023,220 тыс. руб.,12 недель
2019,113 тыс. руб.,41 недель
2016,195 тыс. руб.,37 недель
2022,175 тыс. руб.,17 недель
2017,215 тыс. руб.,22 недель
2017,164 тыс. руб.,15 недель
2020,104 тыс. руб.,42 недель
2020,190 тыс. руб.,36 недель
2022,135 тыс. руб.,41 недель
2020,153 тыс. руб.,34 недель
2015,180 тыс. руб.,15 недель
2016,153 тыс. руб.,19 недель
2020,177 тыс. руб.,43 недель
2018,215 тыс. руб.,40 недель
2019,115 тыс. руб.,15 недель
2019,125 тыс. руб.,24 недель
2018,145 тыс. руб.,41 недель 
<Решение студента>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-2].split()[0]) <= 250:
            print(info) 
<Идеальное решение>: week = int(input())

with open('projects_file.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:
            print(line) 


<Комментарий эксперта>: "
132,318,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join(house1, house2, house3)
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join(house1, house2, house3)
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
133,319,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house, house1, house2] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house, house1, house2] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
134,320,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split(', ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split(', ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
135,321,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
136,322,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for i in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for i in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
137,323,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[0].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[0].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
138,324,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[1])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[1])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
139,325,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
    print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
    print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
140,326,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split('; ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split('; ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
141,327,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
142,328,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k >= max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k >= max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
143,329,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k < max_pr:
        max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k < max_pr:
        max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
144,330,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k == max_pr:
        print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k == max_pr:
        print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
145,331,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr == k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr == k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
146,332,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(k)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(k) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
147,333,20,"Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика.","['Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.', 'Плед: 3500 руб.\nСтатуэтка: 8000 руб.; Шторы: 5000 руб. \nКартина: 80000 руб.; Плетеное кресло: 50000 руб.', 'Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.\nТоршер: 8000 руб.\nКовер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб.', 'Торшер: 90000 руб.\nЧеклы на стулья: 90000 руб.\nКартина: 90000 руб.', 'Торшер: 90000 руб.; Стул: 253674582375 руб.\nЧеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.\nКартина: 90000 руб.; Ковер: 123456789765 руб.']","['150000', '80000', '8986863423', '90000.0', '253674582375']","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3])
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    
if k > max_pr:
    max_pr = k

    
print(max_pr)","house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr)",,"['open', 'open', 'closed', 'closed', 'closed']","<Task description>: Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.
ФОРМАТ ВЫВОДА 
Вещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. 
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную-счетчик для определения максимальной суммы трат.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.
Напечатайте значение переменной-счетчика. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Ваза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.
Ковер: 90000 руб.; Этажерка: 9000 руб.
Панно: 150000 руб.; Декоративный цветок: 10000 руб. 
<Вывод>: 150000 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Плед: 3500 руб.
Статуэтка: 8000 руб.; Шторы: 5000 руб. 
Картина: 80000 руб.; Плетеное кресло: 50000 руб. 
<Вывод>: 80000 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Плед: 5000 руб.; Стелаж: 8986863423 руб.; Глобус: 7000 руб.
Торшер: 8000 руб.
Ковер: 100000 руб.; Скатерть: 5000 руб.; Подсвечник: 8000 руб. 
<Вывод>: 8986863423 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Торшер: 90000 руб.
Чеклы на стулья: 90000 руб.
Картина: 90000 руб. 
<Вывод>: 90000.0 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Торшер: 90000 руб.; Стул: 253674582375 руб.
Чеклы на стулья: 90000 руб.; Чехол: 13485023746 руб.
Картина: 90000 руб.; Ковер: 123456789765 руб. 
<Вывод>: 253674582375 
<Решение студента>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3])
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    
if k > max_pr:
    max_pr = k

    
print(max_pr) 
<Идеальное решение>: house1 = input()
house2 = input()
house3 = input()

res = '; '.join([house1, house2, house3] )
max_pr = 0 

res = res.split('; ')
for item in res:
    k = int(item.split(': ')[1].split()[0])
    if k > max_pr:
        max_pr = k

    
print(max_pr) 


<Комментарий эксперта>: "
148,350,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov)
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov)
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
149,351,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work():
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work():
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
150,352,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
151,353,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov:
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov:
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
152,354,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if k[1] == 'не реализован':
            counter += 1
            money_done += k[0]
        if k[1] == 'реализован':
            money_not_done += k[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if k[1] == 'не реализован':
            counter += 1
            money_done += k[0]
        if k[1] == 'реализован':
            money_not_done += k[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
153,355,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[0] == 'не реализован':
            counter += 1
            money_done += v[1]
        if v[0] == 'реализован':
            money_not_done += v[1]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[0] == 'не реализован':
            counter += 1
            money_done += v[1]
        if v[0] == 'реализован':
            money_not_done += v[1]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
154,356,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] = 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] = 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] = 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] = 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
155,357,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == не реализован:
            counter += 1
            money_done += v[0]
        if v[1] == реализован:
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == не реализован:
            counter += 1
            money_done += v[0]
        if v[1] == реализован:
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
156,358,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        else v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        else v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
157,359,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'не реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'не реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
158,360,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter == 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter == 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
159,361,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return False
        
    else:
        return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return False
        
    else:
        return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
160,362,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return True","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return True 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
161,363,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        print([money_done, False])
        
    else:
        print([money_not_done, True])","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        print([money_done, False])
        
    else:
        print([money_not_done, True]) 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
162,364,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, false]
        
    else:
        return [money_not_done, true]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, false]
        
    else:
        return [money_not_done, true] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
163,365,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
164,366,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter == 0:
        return [money_not_done, True]     ","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter == 0:
        return [money_not_done, True]      
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
165,367,22,"Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.","[""{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}"", ""{\n    'Футурист': (1000000, 'реализован')\n}"", ""{\n    'Проект 1': (12000000, 'реализован'),\n    'АртАктив': (160000, 'не реализован'),\n    'НеоДизайн': (22000000, 'реализован')\n}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован'), \n    'Проект 4': (80, 'не реализован'),\n    'Проект 5': (8, 'не реализован')\n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (29, 'реализован'), \n    'Проект 3': (10, 'реализован'), \n    'Проект 4': (80, 'реализован'),\n    'Проект 5': (8, 'реализован')\n}"", ""{'1_пр': (90000, 'реализован')}"", ""{\n    'Проект 1': (90, 'не реализован'), \n    'Проект 2': (29, 'не реализован'), \n    'Проект 3': (10, 'не реализован') \n}"", ""{\n    'Проект 1': (90, 'реализован'), \n    'Проект 2': (30000, 'не реализован'), \n    'Проект 3': (10, 'реализован') \n}""]","['[42000000, False]', '[1000000, True]', '[160000, False]', '[217, False]', '[217, True]', '[90000, True]', '[129, False]', '[30000, False]']","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
        if counter != 0:
            return [money_done, False]
        
        else:
            return [money_not_done, True]","def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True]",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed', 'closed']","<Task description>: Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой ""реализован"" или ""не реализован""). Гарантируется, что словарь содержит информацию минимум об одном проекте.
Если дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.
Если были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте три переменные-счетчика — одну для подсчета строк "" не реализован"", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""не реализован"", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение ""реализован"", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).
Проверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    'AltAirResidence': (3000000, 'не реализован'), 
    'Серебряный бор': (20000000, 'не реализован'), 
    'The one and only': (4000000, 'не реализован'), 
    'Айсберг': (5000000, 'не реализован'),
    'Хайсбот': (10000000, 'не реализован')
} 
<Вывод>: [42000000, False] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    'Футурист': (1000000, 'реализован')
} 
<Вывод>: [1000000, True] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: {
    'Проект 1': (12000000, 'реализован'),
    'АртАктив': (160000, 'не реализован'),
    'НеоДизайн': (22000000, 'реализован')
} 
<Вывод>: [160000, False] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован'), 
    'Проект 4': (80, 'не реализован'),
    'Проект 5': (8, 'не реализован')
} 
<Вывод>: [217, False] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (29, 'реализован'), 
    'Проект 3': (10, 'реализован'), 
    'Проект 4': (80, 'реализован'),
    'Проект 5': (8, 'реализован')
} 
<Вывод>: [217, True] 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: {'1_пр': (90000, 'реализован')} 
<Вывод>: [90000, True] 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: {
    'Проект 1': (90, 'не реализован'), 
    'Проект 2': (29, 'не реализован'), 
    'Проект 3': (10, 'не реализован') 
} 
<Вывод>: [129, False] 
<Example 8>: 
<Тип теста 8>: closed 
<Ввод>: {
    'Проект 1': (90, 'реализован'), 
    'Проект 2': (30000, 'не реализован'), 
    'Проект 3': (10, 'реализован') 
} 
<Вывод>: [30000, False] 
<Решение студента>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
        if counter != 0:
            return [money_done, False]
        
        else:
            return [money_not_done, True] 
<Идеальное решение>: def work(slov):
    counter = 0
    money_done = 0
    money_not_done = 0
    for k, v in slov.items():
        if v[1] == 'не реализован':
            counter += 1
            money_done += v[0]
        if v[1] == 'реализован':
            money_not_done += v[0]
            
    if counter != 0:
        return [money_done, False]
        
    else:
        return [money_not_done, True] 


<Комментарий эксперта>: "
166,389,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(""Сегодня мы будем анализировать {ton} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(""Сегодня мы будем анализировать {ton} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
167,390,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!)","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!) 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
168,391,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(fСегодня мы будем анализировать {ton} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(fСегодня мы будем анализировать {ton} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
169,392,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать метафоры в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать метафоры в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
170,393,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

    print(f""Сегодня мы будем анализировать {ton} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

    print(f""Сегодня мы будем анализировать {ton} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
171,394,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать ton в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать ton в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
172,395,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = int(input())

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = int(input())

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
173,396,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

Print(f""Сегодня мы будем анализировать {ton} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

Print(f""Сегодня мы будем анализировать {ton} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
174,397,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {variant} в тексте!"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {variant} в тексте!"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
175,398,24,"Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку!","['метафоры', 'эпитеты', 'анафоры', 'антитезы', 'олицентворения']","['Сегодня мы будем анализировать метафоры в тексте!', 'Сегодня мы будем анализировать эпитеты в тексте!', 'Сегодня мы будем анализировать анафоры в тексте!', 'Сегодня мы будем анализировать антитезы в тексте!', 'Сегодня мы будем анализировать олицентворения в тексте!']","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте"")","ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"")",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте программу, которая напечатает анализируемое средство выразительности: 

В переменную ton считывается название средства выразительности. Этот код уже написан.
Программа должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: метафоры 
<Вывод>: Сегодня мы будем анализировать метафоры в тексте! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: эпитеты 
<Вывод>: Сегодня мы будем анализировать эпитеты в тексте! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: анафоры 
<Вывод>: Сегодня мы будем анализировать анафоры в тексте! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: антитезы 
<Вывод>: Сегодня мы будем анализировать антитезы в тексте! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: олицентворения 
<Вывод>: Сегодня мы будем анализировать олицентворения в тексте! 
<Решение студента>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте"") 
<Идеальное решение>: ton = input()

# ваш код ниже

print(f""Сегодня мы будем анализировать {ton} в тексте!"") 


<Комментарий эксперта>: "
176,399,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] != second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] != second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
177,400,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if есть in language and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if есть in language and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
178,401,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.startswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.startswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
179,402,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
180,403,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if languages.endswith('есть') and languages.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if languages.endswith('есть') and languages.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
181,404,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
print(yes)
else:
print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
print(yes)
else:
print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
182,405,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
183,406,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else language.split('-')[1] != second_language:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else language.split('-')[1] != second_language:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
184,407,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('нет') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('нет') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
185,408,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть'):
    print(yes)
eilf language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть'):
    print(yes)
eilf language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
186,409,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(no)
else:
    print(yes)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(no)
else:
    print(yes) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
187,410,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть'):
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть'):
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
188,411,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
189,412,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
190,413,25,"Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no.","['Русский-Английский-есть\nРусский', 'Немецкий-Английский-есть\nАнглийский', 'Немецкий-Французкий-есть\nНемецкий', 'Албансакий-Казахский-есть\nКазахский', 'Албансакий-Французский-есть\nАлбансакий', 'Немецкий-Казахский-нет\nНемецкий', 'Русский-Казахский-нет\nКазахский']","['Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Сможем перевести', 'Не сможем перевести', 'Не сможем перевести', 'Не сможем перевести']","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] = second_language:
    print(yes)
else:
    print(no)","language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no)",,"['open', 'open', 'open', 'closed', 'closed', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную language считывается строка вида ""<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>"". Этот код уже написан.
В переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.
Программа должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу ""Сможем перевести"", она сохранена для вас в переменную yes.
В остальных случаях программа печатает фразу ""Не сможем перевести"". Эта строка сохранена для вас в переменную no. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Русский-Английский-есть
Русский 
<Вывод>: Не сможем перевести 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Немецкий-Английский-есть
Английский 
<Вывод>: Сможем перевести 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Немецкий-Французкий-есть
Немецкий 
<Вывод>: Не сможем перевести 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Албансакий-Казахский-есть
Казахский 
<Вывод>: Сможем перевести 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Албансакий-Французский-есть
Албансакий 
<Вывод>: Не сможем перевести 
<Example 6>: 
<Тип теста 6>: closed 
<Ввод>: Немецкий-Казахский-нет
Немецкий 
<Вывод>: Не сможем перевести 
<Example 7>: 
<Тип теста 7>: closed 
<Ввод>: Русский-Казахский-нет
Казахский 
<Вывод>: Не сможем перевести 
<Решение студента>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] = second_language:
    print(yes)
else:
    print(no) 
<Идеальное решение>: language = input()
second_language = input()

yes = 'Сможем перевести'
no = 'Не сможем перевести'

if language.endswith('есть') and language.split('-')[1] == second_language:
    print(yes)
else:
    print(no) 


<Комментарий эксперта>: "
191,483,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = input()

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = input()

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
192,484,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
193,485,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.txt', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.txt', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
194,486,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
195,487,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
196,488,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(', ')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(', ')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
197,489,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
        print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
        print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
198,490,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if info[0] <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if info[0] <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
199,491,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) < 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) < 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
200,492,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and info[-1].split()[0] >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and info[-1].split()[0] >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
201,493,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[1]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[1]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
202,494,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] = 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] = 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
203,495,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] != 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] != 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
204,496,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == французский:
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == французский:
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
205,497,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(info)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(info) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
206,498,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words or info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words or info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
207,499,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 or int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 or int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
208,500,31,"Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.","['75000', '82100', '30000', '1000000']","['2004,французский,иврит,78918 слов\n1998,французский,испанский,78587 слов\n2003,французский,польский,97809 слов\n2001,французский,польский,88574 слов\n2003,французский,иврит,78369 слов\n2007,французский,английский,82887 слов\n2010,французский,французский,77846 слов\n2013,французский,французский,98860 слов\n2003,французский,английский,82460 слов\n1990,французский,польский,81502 слов\n1995,французский,немецкий,98307 слов\n2001,французский,польский,86564 слов\n2006,французский,польский,85358 слов\n2015,французский,французский,87587 слов\n2007,французский,английский,79348 слов\n2012,французский,французский,91572 слов\n1995,французский,польский,88269 слов\n1992,французский,польский,95124 слов', '1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n1992,французский,иврит,85040 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n1994,французский,испанский,91533 слов\n1992,французский,французский,82592 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n2013,французский,иврит,95478 слов\n1990,французский,английский,97158 слов', '2004,французский,польский,75062 слов\n2015,французский,польский,70234 слов\n2013,французский,иврит,35262 слов\n1991,французский,испанский,94084 слов\n1996,французский,английский,90983 слов\n2006,французский,китайский,67801 слов\n1992,французский,иврит,85040 слов\n2000,французский,немецкий,44758 слов\n1994,французский,испанский,98170 слов\n2004,французский,немецкий,86760 слов\n2000,французский,немецкий,52241 слов\n1991,французский,английский,34717 слов\n1994,французский,испанский,91533 слов\n2010,французский,немецкий,52852 слов\n1992,французский,французский,82592 слов\n2011,французский,польский,81145 слов\n2009,французский,французский,62668 слов\n2003,французский,французский,52162 слов\n2013,французский,немецкий,58569 слов\n2013,французский,английский,54470 слов\n1995,французский,французский,62293 слов\n2013,французский,иврит,52144 слов\n2003,французский,французский,56943 слов\n2002,французский,иврит,69253 слов\n1997,французский,иврит,96576 слов\n1997,французский,французский,94460 слов\n1992,французский,английский,44716 слов\n1993,французский,английский,62393 слов\n2011,французский,иврит,31751 слов\n1998,французский,польский,39630 слов\n2013,французский,иврит,95478 слов\n1992,французский,французский,42673 слов\n2008,французский,иврит,56832 слов\n1997,французский,польский,30475 слов\n1990,французский,английский,97158 слов\n2003,французский,испанский,61586 слов\n2014,французский,испанский,74615 слов\n1992,французский,испанский,43355 слов\n2009,французский,китайский,31552 слов\n2008,французский,английский,53762 слов\n2013,французский,польский,56267 слов\n1995,французский,польский,53221 слов\n2000,французский,испанский,70624 слов\n2008,французский,испанский,46021 слов\n1996,французский,испанский,58576 слов\n2012,французский,английский,49464 слов\n2001,французский,иврит,69826 слов\n2004,французский,испанский,60713 слов\n1993,французский,испанский,48882 слов\n2006,французский,польский,36910 слов\n1990,французский,немецкий,58405 слов\n2007,французский,немецкий,65323 слов\n2004,французский,немецкий,65629 слов\n2015,французский,иврит,54593 слов\n2009,французский,французский,61733 слов\n1998,французский,французский,60820 слов\n2006,французский,английский,31224 слов\n1993,французский,китайский,49360 слов\n2004,французский,иврит,72230 слов', nan]","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 & int(info[-1].split()[0]) >= words & info[1] == 'французский':
            print(line)","words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line)",,"['open', 'closed', 'closed', 'closed']","<Task description>: Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.

Программа должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка ""1993,английский,немецкий,6000 слов"" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.
Гарантируется, что объем текста всегда записан ""<целое число> слов"".
Разделителями данных в файле служат запятые.
Гарантируется, что в файле есть как минимум одна строка с данными. 
С клавиатуры вводится число — количество слов. Этот код уже написан.
Программа должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).
Если подходящих под условие строк в файле нет, то программа ничего не выводит.
ДОПОЛНИТЕЛЬНО
Ваше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).
В открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.
В примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 75000 
<Вывод>: 2004,французский,иврит,78918 слов
1998,французский,испанский,78587 слов
2003,французский,польский,97809 слов
2001,французский,польский,88574 слов
2003,французский,иврит,78369 слов
2007,французский,английский,82887 слов
2010,французский,французский,77846 слов
2013,французский,французский,98860 слов
2003,французский,английский,82460 слов
1990,французский,польский,81502 слов
1995,французский,немецкий,98307 слов
2001,французский,польский,86564 слов
2006,французский,польский,85358 слов
2015,французский,французский,87587 слов
2007,французский,английский,79348 слов
2012,французский,французский,91572 слов
1995,французский,польский,88269 слов
1992,французский,польский,95124 слов 
<Example 2>: 
<Тип теста 2>: closed 
<Ввод>: 82100 
<Вывод>: 1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
1992,французский,иврит,85040 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
1994,французский,испанский,91533 слов
1992,французский,французский,82592 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
2013,французский,иврит,95478 слов
1990,французский,английский,97158 слов 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 30000 
<Вывод>: 2004,французский,польский,75062 слов
2015,французский,польский,70234 слов
2013,французский,иврит,35262 слов
1991,французский,испанский,94084 слов
1996,французский,английский,90983 слов
2006,французский,китайский,67801 слов
1992,французский,иврит,85040 слов
2000,французский,немецкий,44758 слов
1994,французский,испанский,98170 слов
2004,французский,немецкий,86760 слов
2000,французский,немецкий,52241 слов
1991,французский,английский,34717 слов
1994,французский,испанский,91533 слов
2010,французский,немецкий,52852 слов
1992,французский,французский,82592 слов
2011,французский,польский,81145 слов
2009,французский,французский,62668 слов
2003,французский,французский,52162 слов
2013,французский,немецкий,58569 слов
2013,французский,английский,54470 слов
1995,французский,французский,62293 слов
2013,французский,иврит,52144 слов
2003,французский,французский,56943 слов
2002,французский,иврит,69253 слов
1997,французский,иврит,96576 слов
1997,французский,французский,94460 слов
1992,французский,английский,44716 слов
1993,французский,английский,62393 слов
2011,французский,иврит,31751 слов
1998,французский,польский,39630 слов
2013,французский,иврит,95478 слов
1992,французский,французский,42673 слов
2008,французский,иврит,56832 слов
1997,французский,польский,30475 слов
1990,французский,английский,97158 слов
2003,французский,испанский,61586 слов
2014,французский,испанский,74615 слов
1992,французский,испанский,43355 слов
2009,французский,китайский,31552 слов
2008,французский,английский,53762 слов
2013,французский,польский,56267 слов
1995,французский,польский,53221 слов
2000,французский,испанский,70624 слов
2008,французский,испанский,46021 слов
1996,французский,испанский,58576 слов
2012,французский,английский,49464 слов
2001,французский,иврит,69826 слов
2004,французский,испанский,60713 слов
1993,французский,испанский,48882 слов
2006,французский,польский,36910 слов
1990,французский,немецкий,58405 слов
2007,французский,немецкий,65323 слов
2004,французский,немецкий,65629 слов
2015,французский,иврит,54593 слов
2009,французский,французский,61733 слов
1998,французский,французский,60820 слов
2006,французский,английский,31224 слов
1993,французский,китайский,49360 слов
2004,французский,иврит,72230 слов 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: 1000000 
<Вывод>: nan 
<Решение студента>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 & int(info[-1].split()[0]) >= words & info[1] == 'французский':
            print(line) 
<Идеальное решение>: words = int(input())

with open('info_texts.csv', 'r', encoding='utf-8') as my_file:
    for line in my_file:
        line = line.strip()
        info = line.split(',')
        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':
            print(line) 


<Комментарий эксперта>: "
209,519,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split()
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split()
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
210,520,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = {}
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = {}
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
211,521,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
212,522,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input()
data.split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input()
data.split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
213,523,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for i in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for i in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
214,524,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(':')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(':')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
215,525,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
216,526,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp = comp.split(': ')
    
    if skill in comp:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp = comp.split(': ')
    
    if skill in comp:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
217,527,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.add(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.add(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
218,528,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill not in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill not in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
219,529,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(result)","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(result) 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
220,530,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*result)","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*result) 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
221,531,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result)","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result) 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
222,532,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
223,533,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True))","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True)) 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
224,534,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=true), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=true), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
225,535,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

    print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

    print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
226,536,33,"Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел.","['Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами', 'Бизнес-переводчик: английский язык\nанглийский язык', 'Бизнес-аналитик: python\nC++', 'Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность\nSQL', 'Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение\nмашинное обучение']","['Организатор международных мероприятий; Аккаунт-менеджер', 'Бизнес-переводчик', nan, 'Аналитик', 'Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик']","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
if skill in skills:
    result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')","data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. 

ФОРМАТ ВВОДА
На первой строке через прямой слэш (""/"") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. 
На второй строке вводится навык, которым владеет Игорь. 
ФОРМАТ ВЫВОДА
Названия должностей, на которые Игоря могут взять.
Названия должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.
Если таких должностей нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.
Считайте в переменную название навыка.
Создайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;
если навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.
Отсортируйте получившийся список в обратном алфавитном порядке. 
Напечатайте элементы списка через точку с запятой и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Организатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык 
управление проектами 
<Вывод>: Организатор международных мероприятий; Аккаунт-менеджер 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Бизнес-переводчик: английский язык
английский язык 
<Вывод>: Бизнес-переводчик 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Бизнес-аналитик: python
C++ 
<Вывод>: nan 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Аналитик: SQL/ Консультант: коммуникации/ Менеджер: многозначность
SQL 
<Вывод>: Аналитик 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Аналитик: машинное обучение/ Специалист по оптимизации процессов: машинное обучение/ Специалист по машинному переводу: машинное обучение
машинное обучение 
<Вывод>: Специалист по оптимизации процессов; Специалист по машинному переводу; Аналитик 
<Решение студента>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
if skill in skills:
    result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 
<Идеальное решение>: data = input().split('/ ')
skill = input()

result = []
for comp in data:
    comp, skills = comp.split(': ')
    
    if skill in skills:
        result.append(comp)

print(*sorted(result, reverse=True), sep = '; ') 


<Комментарий эксперта>: "
227,577,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print('В агентстве «Шедеврус» мы делаем дизайн за {time}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print('В агентстве «Шедеврус» мы делаем дизайн за {time}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
228,578,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!)","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!) 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
229,579,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(fВ агентстве «Шедеврус» мы делаем дизайн за {time}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(fВ агентстве «Шедеврус» мы делаем дизайн за {time}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
230,580,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за неделю!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за неделю!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
231,581,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

    print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

    print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
232,582,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за time!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за time!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
233,583,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

Print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

Print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
234,584,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {duration}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {duration}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
235,585,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f""В агентстве «Шедеврус» мы делаем дизайн за {time}!')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f""В агентстве «Шедеврус» мы делаем дизайн за {time}!') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
236,586,36,"Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку!","['неделю', 'день', 'месяц', 'вечность', 'три дня']","['В агентстве «Шедеврус» мы делаем дизайн за неделю!', 'В агентстве «Шедеврус» мы делаем дизайн за день!', 'В агентстве «Шедеврус» мы делаем дизайн за месяц!', 'В агентстве «Шедеврус» мы делаем дизайн за вечность!', 'В агентстве «Шедеврус» мы делаем дизайн за три дня!']","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}')","time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу: 

В переменную time считывается строка с названием временного промежутка. Этот код уже написан.
Программа должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. 
Важно! В коде обязательно нужно использовать f-строку! 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: неделю 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за неделю! 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: день 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за день! 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: месяц 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за месяц! 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: вечность 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за вечность! 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: три дня 
<Вывод>: В агентстве «Шедеврус» мы делаем дизайн за три дня! 
<Решение студента>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}') 
<Идеальное решение>: time = input()

# ваш код ниже

print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!') 


<Комментарий эксперта>: "
237,587,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('лендинг') and time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('лендинг') and time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
238,588,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = input()

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = input()

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
239,589,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.endswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.endswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
240,590,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') & time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') & time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
241,591,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') or time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') or time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
242,592,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг'): 
    print(work)
elif time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг'): 
    print(work)
elif time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
243,593,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time < 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time < 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
244,594,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг'):
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг'):
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
245,595,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if time <= 10:
    print(work)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if time <= 10:
    print(work)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
246,596,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
247,597,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
248,598,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(wok)
else:
    print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(wok)
else:
    print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
249,599,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
print(reject)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
print(reject) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
250,600,37,"Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject.","['Лендинг;7800;InfoSerf\n11', 'Постер;13000;BizHelp\n5', 'Лендинг и постер;40000;ДанныеМакс\n8', 'Концепция;3400000;ИнфоОптима\n2', 'Лендинг;3550000;ByteHub\n25']","['Отказываем заказчику', 'Отказываем заказчику', 'Берем заказ в работу', 'Отказываем заказчику', 'Отказываем заказчику']","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(reject)
else:
    print(work)","order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

В переменную order считывается строка вида ""<заказ>;<стоимость в рублях>;<компания-заказчик>"". Этот код уже написан.
В переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.
Программа должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова ""Лендинг"".
Если условия выполняются, программа печатает фразу ""Берем заказ в работу"". Эта фраза сохранена для вас в переменную work.
В остальных случаях программа печатает фразу ""Отказываем заказчику"". Эта строка сохранена для вас в переменную reject. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Лендинг;7800;InfoSerf
11 
<Вывод>: Отказываем заказчику 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Постер;13000;BizHelp
5 
<Вывод>: Отказываем заказчику 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Лендинг и постер;40000;ДанныеМакс
8 
<Вывод>: Берем заказ в работу 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Концепция;3400000;ИнфоОптима
2 
<Вывод>: Отказываем заказчику 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Лендинг;3550000;ByteHub
25 
<Вывод>: Отказываем заказчику 
<Решение студента>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(reject)
else:
    print(work) 
<Идеальное решение>: order = input()
time = int(input())

work = 'Берем заказ в работу'
reject = 'Отказываем заказчику'

# ваш код

if order.startswith('Лендинг') and time <= 10:
    print(work)
else:
    print(reject) 


<Комментарий эксперта>: "
251,641,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
252,642,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design:
    if font in v:
        used.append(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design:
    if font in v:
        used.append(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
253,643,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for key,value in design.items():
    if font in v:
        used.append(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for key,value in design.items():
    if font in v:
        used.append(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
254,644,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in k:
        used.append(v)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in k:
        used.append(v)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
255,645,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font not in v:
        used.append(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font not in v:
        used.append(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
256,646,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in v:
        used.add(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in v:
        used.add(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
257,647,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in v
        used.append(k)
        
print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in v
        used.append(k)
        
print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
258,648,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(sorted(used))","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(sorted(used)) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
259,649,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(*used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(*used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
260,650,41,"Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список.","['Courier New', 'Tahoma', 'Comic Sans MS', 'Arial Black', 'Monotype']","[""['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']"", ""['Ольга Кузнецова', 'Дмитрий Михайлов']"", '[]', ""['Дмитрий Михайлов']"", '[]']","font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
    print(used)","design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used)",,"['open', 'open', 'open', 'closed', 'closed']","<Task description>: Реализуйте следующую программу:

Дан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.
В переменную font считывается название шрифта. 
Определите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. 
Если таких дизайнеров нет, должен печататься пустой список. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Courier New 
<Вывод>: ['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Tahoma 
<Вывод>: ['Ольга Кузнецова', 'Дмитрий Михайлов'] 
<Example 3>: 
<Тип теста 3>: open 
<Ввод>: Comic Sans MS 
<Вывод>: [] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Arial Black 
<Вывод>: ['Дмитрий Михайлов'] 
<Example 5>: 
<Тип теста 5>: closed 
<Ввод>: Monotype 
<Вывод>: [] 
<Решение студента>: font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
    print(used) 
<Идеальное решение>: design = {
    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],
    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],
    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],
    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],
    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']
}

font = input()
used = []

for k,v in design.items():
    if font in v:
        used.append(k)
        
print(used) 


<Комментарий эксперта>: "
261,651,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count)
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count)
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
262,652,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies():
    names = input().split(', ')
    count = list(map(int, input().split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies():
    names = input().split(', ')
    count = list(map(int, input().split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
263,653,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(name)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(name)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
264,654,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(',')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(',')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
265,655,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
266,656,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
267,657,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    print(sorted(agency))","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    print(sorted(agency)) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
268,658,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
        
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
        
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
269,659,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(names):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(names):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
270,660,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in len(names):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in len(names):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
271,661,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] > 500:
            agency.append(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] > 500:
            agency.append(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
272,662,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.add(names[idx])
    
    return sorted(agency)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.add(names[idx])
    
    return sorted(agency) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
273,663,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return agency","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return agency 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
274,664,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency, reverse = True)","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency, reverse = True) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
275,665,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:    
            return sorted(names[idx])","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:    
            return sorted(names[idx]) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
276,666,42,"Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.","[""'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'"", ""'Инноватус, Прогрессус, Эволютус', '1424, 72, 124'"", ""'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471'""]","[""['Авангардус', 'Виртуус', 'Креатус']"", ""['Инноватус']"", ""['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7']""]","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    print(sorted(agency))","def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency)",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.

Определите функцию best_agencies, которая принимает на вход две строки:
в первой строке через запятую и пробел перечислены названия агентств;
во второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.
Гарантируется, что названия агентств не повторяются.
Функция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. 
Гарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. 
Важно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: 'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599' 
<Вывод>: ['Авангардус', 'Виртуус', 'Креатус'] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: 'Инноватус, Прогрессус, Эволютус', '1424, 72, 124' 
<Вывод>: ['Инноватус'] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: 'Bot1, Bot2, Bot3, Bot4, Bot5, Bot6, Bot7', '124124, 32859, 452335, 8924, 53532, 45453, 8902471' 
<Вывод>: ['Bot1', 'Bot2', 'Bot3', 'Bot4', 'Bot5', 'Bot6', 'Bot7'] 
<Решение студента>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    print(sorted(agency)) 
<Идеальное решение>: def best_agencies(names, count):
    names = names.split(', ')
    count = list(map(int, count.split(', ')))
    
    agency = []
    
    for idx in range(len(names)):
        if count[idx] >= 500:
            agency.append(names[idx])
    
    return sorted(agency) 


<Комментарий эксперта>: "
277,682,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = '{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = '{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
278,683,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
279,684,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'e1, e2, e3'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'e1, e2, e3'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
280,685,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e = input()
e1 = input()
e2 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e = input()
e1 = input()
e2 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
281,686,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(',')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(',')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
282,687,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
283,688,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
284,689,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for i in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for i in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
285,690,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(':')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(':')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
286,691,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = exh.split(': ')[1]
    cnt.append(review)
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = exh.split(': ')[1]
    cnt.append(review)
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
287,692,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.add(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.add(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
288,693,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[0])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[0])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
289,694,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(cnt)","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(cnt) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
290,695,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt))","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt)) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
291,696,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt)[:2])","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt)[:2]) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
292,697,44,"Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.","['мои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346', 'Размышления в тишине: 4, Контрасты: 32, Отражения души: 6\nСинтез: 8, Игра на грани: 10\nВзгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1', 'абстракции: 236, симфония: 3262\nдуша души: 1345, туда: 3252\nкак так: 3673, а где же мы: 1362', 'Раз: 1\nДва: 2\nТри: 0']","['[1346, 450]', '[452, 43]', '[3673, 3262]', '[2, 1]']","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True))","e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2])",,"['open', 'open', 'closed', 'closed']","<Task description>: Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. 

ФОРМАТ ВВОДА 
Вводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. 
Гарантируется, что каждая строка состоит из информации минимум об одной выставке.
ФОРМАТ ВЫВОДА 
Список из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.
Создайте переменную для сохранения количества отзывов для каждой выставки.
Разбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.
Отсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: мои печали: 23, пять комнат: 450, ангел летящий: 321
икар: 92, свет твоих окон: 45
буря: 134, отражение: 21, л-ю-б-о-в-ь: 1346 
<Вывод>: [1346, 450] 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Размышления в тишине: 4, Контрасты: 32, Отражения души: 6
Синтез: 8, Игра на грани: 10
Взгляд: 10, Дверь позади тебя: 43, Форма: 452, Восприятие парадокса: 1 
<Вывод>: [452, 43] 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: абстракции: 236, симфония: 3262
душа души: 1345, туда: 3252
как так: 3673, а где же мы: 1362 
<Вывод>: [3673, 3262] 
<Example 4>: 
<Тип теста 4>: closed 
<Ввод>: Раз: 1
Два: 2
Три: 0 
<Вывод>: [2, 1] 
<Решение студента>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)) 
<Идеальное решение>: e1 = input()
e2 = input()
e3 = input()

res = f'{e1}, {e2}, {e3}'.split(', ')
cnt = []

for exh in res:
    review = int(exh.split(': ')[1])
    cnt.append(int(review))
    
print(sorted(cnt, reverse=True)[:2]) 


<Комментарий эксперта>: "
293,698,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input()
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input()
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
294,699,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
295,700,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split(';')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split(';')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
296,701,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for i in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for i in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
297,702,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
298,703,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(':')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(':')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
299,704,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    info = info.split(': ')
    
    if month in info:
        result.append(info)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    info = info.split(': ')
    
    if month in info:
        result.append(info)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
300,705,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
301,706,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(avail)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(avail)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
302,707,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.add(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.add(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
303,708,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month not in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month not in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
304,709,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(result)","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(result) 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
305,710,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result))","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result)) 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
306,711,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result, reverse = True), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result, reverse = True), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
307,712,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

    print(*sorted(result), sep = ', ')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

    print(*sorted(result), sep = ', ') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
308,713,45,"Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел.","['Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст', 'Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август\nянварь', 'Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь\nапрель']","['Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей', 'Московский музей современного искусства', nan]","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ',')","data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ')",,"['open', 'open', 'closed']","<Task description>: Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.

ФОРМАТ ВВОДА
На первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. 
На второй строке вводится месяц, в который Алина хочет провести выставку.
ФОРМАТ ВЫВОДА
Названия музеев, которые устраивают Алину (где она может провести выставку).
Названия должны выводиться через запятую и пробел в алфавитном порядке.
Если таких музеев нет, программа ничего не выводит.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Считайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.
Считайте в переменную название месяца.
Создайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.
Обратитесь к каждому элементу из списка, созданного в п.1:
разбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;
если месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.
Отсортируйте получившийся список в алфавитном порядке. 
Напечатайте элементы списка через запятую и пробел. 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: Новая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август
август 
<Вывод>: Музей изобразительных искусств, Новая Третьяковка, Пушкинский музей 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: Московский музей современного искусства: январь, апрель, май, июнь; Государственный центр современного искусства: февраль, май; МАРС: июнь, июль, август
январь 
<Вывод>: Московский музей современного искусства 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: Русский музей: октябрь, ноябрь; Музей декоративно-прикладного искусства: январь, февраль, март; Московский музей современного искусства: декабрь, январь
апрель 
<Вывод>: nan 
<Решение студента>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ',') 
<Идеальное решение>: data = input().split('; ')
month = input()

result = []

for info in data:
    museum, avail = info.split(': ')
    
    if month in avail:
        result.append(museum)

print(*sorted(result), sep = ', ') 


<Комментарий эксперта>: "
309,714,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data)
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data)
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
310,715,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success():
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success():
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
311,716,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in info.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in info.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
312,717,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data:
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data:
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
313,718,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for key, value in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for key, value in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
314,719,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] = 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] = 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
315,720,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if k[1] == 'победа':
            wins += 1
        money += k[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if k[1] == 'победа':
            wins += 1
        money += k[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
316,721,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[2] == 'победа':
            wins += 1
        money += v[1]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[2] == 'победа':
            wins += 1
        money += v[1]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
317,722,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins =+ 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins =+ 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
318,723,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
319,724,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) != wins:
        return True
        
    return money","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) != wins:
        return True
        
    return money 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
320,725,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return money
        
    return True","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return money
        
    return True 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
321,726,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return [True, money]
        
    return False","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return [True, money]
        
    return False 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
322,727,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return [False, money]","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return [False, money] 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
323,728,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return wins","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return wins 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
324,729,46,"Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).","[""{\n    2019: (45672, 'победа'), \n    2020: (78988, 'победа'), \n    2021: (2340, 'проигрыш'), \n    2022: (32353, 'победа'),\n    2023: (159200, 'победа')\n}"", ""{\n    2021: (16270, 'победа'), \n    2022: (333550, 'победа'),\n    2023: (890185, 'победа')\n}"", ""{ \n    2022: (100, 'проигрыш'),\n    2024: (26, 'проигрыш')\n}""]","['318553', 'True', '126']","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        print(True)
        
    print(money)","def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money",,"['open', 'open', 'closed']","<Task description>: Напишите функцию, определяющую успешна студия дизайна или нет. 

ТРЕБУЕМАЯ ФУНКЦИЯ 
Функция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — ""победа"" или ""проигрыш""). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.
Если студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.
Если хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.
ВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.
АЛГОРИТМ РЕШЕНИЯ 
Это один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.
Определите функцию и аргумент, с которым она работает.
Задайте две переменные-счетчика — одну для подсчета строк ""победа"", другую для подсчета суммы чистой прибыли.
Обратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение ""победа"", то обновите переменную-счетчик побед (прибавьте 1).
Вне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).
Проверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли). 
<Example 1>: 
<Тип теста 1>: open 
<Ввод>: {
    2019: (45672, 'победа'), 
    2020: (78988, 'победа'), 
    2021: (2340, 'проигрыш'), 
    2022: (32353, 'победа'),
    2023: (159200, 'победа')
} 
<Вывод>: 318553 
<Example 2>: 
<Тип теста 2>: open 
<Ввод>: {
    2021: (16270, 'победа'), 
    2022: (333550, 'победа'),
    2023: (890185, 'победа')
} 
<Вывод>: True 
<Example 3>: 
<Тип теста 3>: closed 
<Ввод>: { 
    2022: (100, 'проигрыш'),
    2024: (26, 'проигрыш')
} 
<Вывод>: 126 
<Решение студента>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        print(True)
        
    print(money) 
<Идеальное решение>: def success(data):
    
    wins = 0
    money = 0
    
    for k, v in data.items():
        if v[1] == 'победа':
            wins += 1
        money += v[0]
            
    if len(data) == wins:
        return True
        
    return money 


<Комментарий эксперта>: "
